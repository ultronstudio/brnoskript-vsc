name: Create release from package.json version

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          check-latest: true
          cache: 'npm'

      - name: Read version from package.json (script)
        id: get_version
        run: node scripts/get-version.js

      - name: Create tag if missing and push
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch --prune --unshallow || true
          git fetch --tags
          TAG=v${VERSION}
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation"
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Check if release for tag exists
        id: check_release
        uses: actions/github-script@v6
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        with:
          script: |
            const tag = `v${process.env.VERSION}`;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              core.setOutput('exists', 'true');
              core.setOutput('upload_url', rel.data.upload_url);
              core.setOutput('release_id', rel.data.id.toString());
            } catch (e) {
              if (e.status === 404) {
                core.setOutput('exists', 'false');
              } else {
                throw e;
              }
            }

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          body: |
            Release v${{ steps.get_version.outputs.version }}
            Generated automatically from package.json version.
          draft: false
          prerelease: false

      - name: Determine upload URL
        id: resolve_upload_url
        run: |
          if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
            echo "upload_url=${{ steps.check_release.outputs.upload_url }}" >> "$GITHUB_OUTPUT"
          else
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> "$GITHUB_OUTPUT"
          fi

      # === Build VSIX with modern toolchain ===
      - name: Install deps
        run: npm ci

      - name: Package extension (.vsix)
        run: |
          npm i -D @vscode/vsce@latest
          npx @vscode/vsce package
        # Pokud balíš monorepo, zvaž VSIX_PACKAGE_PATH env nebo --out ./dist

      # === Upload .vsix to the release (works for new or existing release) ===
      - name: Upload VSIX asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}
        with:
          upload_url: ${{ steps.resolve_upload_url.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}.vsix
          asset_name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}.vsix
          asset_content_type: application/octet-stream