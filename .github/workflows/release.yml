name: Create release from package.json version

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Read version from package.json (script)
        id: get_version
        run: node scripts/get-version.js

      - name: Create tag if missing and push
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch --prune --unshallow || true
          git fetch --tags
          TAG=v${VERSION}
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation"
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Check if release for tag exists
        id: check_release
        uses: actions/github-script@v6
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        with:
          script: |
            const tag = `v${process.env.VERSION}`;
            try {
              await github.rest.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag });
              core.setOutput('exists', 'true');
            } catch (e) {
              if (e.status === 404) core.setOutput('exists', 'false'); else throw e;
            }

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          body: |
            Release v${{ steps.get_version.outputs.version }}
            Generated automatically from package.json version.
          draft: false
          prerelease: false

      - name: Release already exists notice
        if: steps.check_release.outputs.exists == 'true'
        run: echo "Release for v${{ steps.get_version.outputs.version }} already exists â€” skipping creation."
